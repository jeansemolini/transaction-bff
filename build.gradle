plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '3.4.0.2513'
}

group = 'br.com.coffeeandit'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {url = "https://repo.spring.io/milestone"}
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.0'

    //Open Telemetry
    implementation 'org.springframework.cloud:spring-cloud-sleuth-otel-dependencies:1.1.0-M4'
    implementation 'org.springframework.cloud:spring-cloud-sleuth-otel-autoconfigure:1.1.0-M5'

    implementation ('org.springframework.cloud:spring-cloud-starter-sleuth:3.1.0') {
        exclude group : 'org.springframework.cloud', module :  'spring-cloud-sleuth-brave'
    }

    implementation 'io.opentelemetry:opentelemetry-exporter-otlp-trace:1.12.0'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'io.projectreactor.kafka:reactor-kafka'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'

    // retry
    implementation 'org.springframework.retry:spring-retry:1.3.1'

    // circuit braker
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:1.7.1'
    implementation 'io.github.resilience4j:resilience4j-core:1.7.1'
    implementation 'io.github.resilience4j:resilience4j-all:1.7.1'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.data:spring-data-redis'

    // SpringDoc
    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.6.3'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8'

    //micrometer e actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    //testes
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'it.ozimov:embedded-redis:0.7.3'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    configurations.testRuntimeOnly {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

tasks.named('test') {

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }

    useJUnitPlatform()
}

tasks.named('sonarqube').configure {
    dependsOn jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

    dependsOn test
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/jacocoTest.exec"))
}
